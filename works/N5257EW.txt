【ユーザ情報】
ユーザID: 850066
ユーザ名: 佐久　満

【Nコード】
N5257EW

【タイトル】
Made with secret alien technology

【作者名】
佐久　満

【種別】
短編小説

【年齢制限】
年齢制限なし

【ジャンル】
エッセイ〔その他〕

【登録必須キーワード】
指定無し

【キーワード】
Lisp Scheme ラムダ計算 不完全性定理

【あらすじ】
妄想というのはやっかいなもので、一度思い浮かぶと頭にこびりついて離れない。
出力して文字にしてやっとその束縛から逃れることができる。
しかも、脳に出現するタイミングは、本人の都合などお構いなしで、勝手なものである。
おかげで辟易気味である。

ゲーデルの不完全性定理の証明がLispだと簡単に書けるので、にわかLisperとしてLispについて簡単に書いてみた。
もはや誰にむかって書いているのかすら不明だが、そんな文章があってもいいだろう。
小説家になろうだとインデントがうまくいかない。何か対策はないものか。

【掲載日時】
2018-07-14 11:01:50

【感想受付】
感想を受け付ける（制限なし）

【レビュー受付】
レビューを受け付ける

【評価受付】
評価を受け付ける

【開示設定】
すべての一覧で表示

【評価】
総合評価: 0pt
評価者数: 0人
お気に入り登録: 0件
文章評価: 平均0pt 合計0pt
ストーリー評価: 平均0pt 合計0pt

【本文】
(case  '(What is alien technology?)
  (はじめに  '(これはLispについての個人的主張である。))

  (language  '(Lispがなぜ難解かというと、何をやっているか全く分からないから、これにつきる。なぜ括弧が大量に出てくるのか、lambdaとは何か、全く意味不明だ。Lispの歴史について書くと、まずLispは古い言語である。かつて人工知能の研究に使われたが、それはディープラーニングが登場するはるか以前の話である。大学に入っていきなりLispをやっても意味不明だろう。拒否反応を招くことから、Lispをやるのは変人と決まっているらしい。しかし、Lispは|計算機科学《コンピューター》と深い関わりがある。))

  (lambda  '(lambdaはラムダ式ともいう。ラムダ式はラムダ計算と関係がある。ラムダ計算によって|帰納的関数《コンビネータ》が定義される。これはつまり、ラムダ式で|再帰関数《コンビネータ》を書くと、計算可能な関数を定義できて、停止問題を一般化できるのだ。そういうわけで計算理論ではlambdaは非常に重要である。

なぜ再帰で計算可能性が定義できるか。直感的にはあらゆるプログラムはラムダ式で書ける。ところで|帰納的関数《コンビネータ》はアルゴリズムそのものである。よって再帰で書けるプログラムは、計算可能なプログラムと同じになるのである。このあたりは、計算理論の本質である。))

 (cardinality '(ここでいきなり連続体仮説の話になる。|量子系《クォンタムステート》と|古典系《クラシカルステート》の境界はどこにあるのか。その答えは、ヒルベルトプログラムにまで遡る。直観的にいえば、|量子系《クォンタムステート》はデジタルであり、|古典系《クラシカルステート》はアナログである。|量子系《クォンタムステート》を計算するということは、アナログからデジタルに変換することを意味する。この作業はユニタリ変換で計算できるが、不確定性原理により全てを同時に知ることはできない。この疑似アナログ=デジタル変換は連続体仮説と関係がある。

チューリング機械の停止問題の証明には、対角線論法が使われるが、|濃度《カーディナリティ》の問題はもっと深い、根源的な問題がある。つまり|量子系《クォンタムステート》はデジタルで、|古典系《クラシカルステート》がアナログなら、両者の|濃度《カーディナリティ》は等しいのか、という問題だ。

仮に宇宙が量子コンピューターであり、計算可能であり、チューリング完全だとしよう。そうであるなら、宇宙というチューリング機械のプログラムの|濃度《カーディナリティ》は、自然数の|濃度《カーディナリティ》と等しくなければならない。しかし、われわれの宇宙は古典系であり、その|濃度《カーディナリティ》は実数と等しいはずである。ところで連続体仮説から、両者の|濃度《カーディナリティ》の間には別の|濃度《カーディナリティ》は存在せず、これ以上の考察は不可能である。(なぜなら、連続体仮説は証明も反証もできないから)

結論としては、|量子系《クォンタムステート》と|古典系《クラシカルステート》には埋め難い溝があり、両者を統合するのは不可能ということになる。量子重力理論にしろ、量子コンピューターにしろ、両者の溝を埋めることのできない、不完全なものでしかないだろう。結局、この宇宙がそのようにできているからという、不可知論を結論とする他ない。1963年に連続体仮説がZFC独立であると証明されたときから、現在の数学の枠組みでは統合は不可能だ。もし可能性があるとすれば、ZFCとは全く異なる、別の数学体系が必要になる。望みは極めて薄い、としかいえない。))

  (本題  '(無慈悲な現実からは目をそらし、Lispの世界に戻ることにする。コードの例を挙げてみよう。ゲーデルの不完全性定理の証明である。これは停止問題に置き換えることができる。コードを書くと、


(g g)

expression  (g g)
value       (is-unprovable (value-of ((' (lambda (x) ((' (lamb
            da (L) (L is-unprovable (L value-of (L (L ' x) (L 
            ' x)))))) (' (lambda (x y) (cons x (cons y nil))))
            ))) (' (lambda (x) ((' (lambda (L) (L is-unprovabl
            e (L value-of (L (L ' x) (L ' x)))))) (' (lambda (
            x y) (cons x (cons y nil))))))))))


こんな感じである。なぜ一部だけかというと、これはチャイティンの著書からの引用だからだ。引用はいろいろと面倒なルールがあって、本人の許可など当然取ってないので、どこまでが許容範囲か不明である。削除されてはたまらないので、調子にのって全文引用などは怖くてできない。しかし、自分でコードを書いても、他人のコードの書き直しにすぎないし、全く面白くない。
ゲーデルの対角線論法が、この短いコードで証明できるというので十分な気がするが、ここは別の証明も挙げておく。

厳密性を犠牲にして、強引に書けば、β簡約が非正規であれば反例になる。つまり、

(λx.xx)(λx.xx) → (λx.xx)(λx.xx) → …

である。一行で書けてしまった。
不完全性定理の証明が、たったこれだけのコードで書ける。Lispにいかれる連中の気持ちが分かろうというものだ。もっと再帰を使いたかったが、大量の括弧で読者を威嚇するのはまたの機会に。)))

これで終わるはずだったが、不完全性定理の証明の概略を書くことにする。計算機科学の停止問題の証明を利用する。Lispならdefunを使うのだろうが、日本語のままでも書ける。まず関数「この関数は停止しない()」を定義する。「停止する」というのは、ある入力に対して関数を実行すれば、プログラムの実行が停止するという意味である。この関数は入力がYESなら停止せず、入力がNOなら停止するとする。ここで、関数「この関数は停止しない()」自身をこの関数に入力する。仮にこの関数が停止したとすれば実行結果は、

この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(この関数は停止しない(
……))))))))))))))))))))))))))))))

となり、停止しない。つまりこの関数が停止するとすれば停止せず、停止しないとすれば関数の定義より停止する。これは矛盾である。以上が停止問題の証明だが、これにゲーデル数を導入すれば第一不完全性定理が証明できる。さらに記号を使わずに書けば、

この関数は関数の入力がNOなら停止するという関数のこの関数は関数の入力がNOなら停止するという関数のこの関数は関数の入力がNOなら停止するという関数のこの関数は関数の入力がNOなら停止するという関数のこの関数は関数の入力がNOなら停止するという関数のこの関数は関数の入力がNOなら停止するという関数のこの関数は関数の入力がNOなら停止するという関数のこの関数は関数の入力がNOなら停止するという関数のこの関数は関数の入力がNOなら停止するという関数のこの関数は関数の入力がNOなら停止するという関数の
……以下無限に続く……実行結果の実行結果の実行結果の実行結果の実行結果の実行結果の実行結果の実行結果の実行結果の実行結果……

となり無限に続いて停止しない。自己言及を利用した命題には全て応用できるので、

この文章は必ず終わらない(この文章は必ず終わらない(この文章は必ず終わらない(この文章は必ず終わらない(この文章は必ず終わらない(この文章は必ず終わらない(この文章は必ず終わらない(この文章は必ず終わらない(この文章は必ず終わらない(この文章は必ず終わらない(
……))))))))))

というような応用も可能である。以上は完全に余談であるが、Lispを利用した文体実験としては面白いだろう。

【免責事項】
本テキストデータの利用によって発生する如何なる案件につきまして、株式会社ヒナプロジェクト及びその関連グループは一切の責任を負いません。

このファイルは「小説家になろう」の小説バックアップ機能を用いて作成されました。
作成日時: 2019-01-22 14:00:55
